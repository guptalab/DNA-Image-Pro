import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;

import javax.imageio.ImageIO;

public class image_generator {
	public static String IMG = "im1.png";
	static String printer1 = "";
	static StringBuffer printer = new StringBuffer("");
	static int[][] pixelData;
	static int[] first_row_pixel;
	static int[] first_col_pixel;
	static int seed_pixel;
	static int width, height;

	public static void create_image_tile(String path_input, String path_output) {

		try {

			IMG = path_input;
			printer1 = "";
			printer = new StringBuffer("");
			String cur_dir = System.getProperty("user.dir");
			readimage();
			File file = new File(cur_dir + "/" + path_output + ".tiles");
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			add_string("%Tile file generated by shift generator");
			add_string("%Mentor : Manish Gupta");
			add_string("%Author : Dhaval Trivedi");

			// first line of tile file
			add_string("tile edges matches {{N E S W}*}");
			// we don't know the value of tile_types_needed because this is
			// non-uniform shifting
			// so we will count how many tiles are whenever we add new rule
			// tile.
			// so we will print the first line to the file and then we will
			// print in the last.
			bw.write(printer.toString());
			// reseting printer
			printer = new StringBuffer("");
			int tile_types_needed = width * height; // N(border row)+N-1(border
													// column)+N (rule tiles)

			int glues_needed = width * height;

			add_string("num binding types=" + glues_needed);
			add_string("tile edges={");

			add_string("%seed tile");

			add_tile(1, 0, 0, 1, pixelData[height - 1][width - 1]);

			add_string("");

			add_string("%First row. (bottom boundry row)");

			add_string("");

			// adding first row tiles
			for (int x = width - 2, y = 1; x >= 0; x--, y++) {
				int north = 0;
				int east = y;
				int south = 0;
				int west = (y + 1) % width;
				int color_index = pixelData[height - 1][x];
				add_tile(north, east, south, west, color_index);
			}

			int tt = 0;
			for (int z = 1; z < height; z++) {
				for (int x = width - 2, y = 1; x >= 0; x--, y++) {
					int north = 0;
					int east = width * z + y - 1;
					int south = 0;
					int west;
					if (y != width - 1)
						west = width * z + y;
					else
						west = 0;
					int color_index = pixelData[height - 1 - z][x];
					add_tile(north, east, south, west, color_index);
				}
			}
			add_string("");

			// adding first column tiles
			for (int x = height - 2, y = 1; x >= 0; x--, y++) {
				int north = y + 1;
				int east = 0;
				int south = y;
				int west = width * y;
				int color_index = pixelData[x][width - 1];
				add_tile(north, east, south, west, color_index);
			}

			add_string("");
			add_string("");
			add_string("}");
			add_string("binding strengths=");
			add_string("{");
			StringBuffer binding_strengths = new StringBuffer("");

			for (int x = 0; x < height * (width); x++)
				binding_strengths.append("3 ");

			add_string(binding_strengths.toString());
			add_string("}");

			// positioning seed tile
			add_string("seed=" + "127" + "," + "127" + ",1");

			// adding gse,gmc and other important parameters
			add_string("Gse=10");
			add_string("Gmc=19");
			add_string("block=4");
			add_string("size=64");
			// now we know the total tile types needed.
			add_string2("num tile types=" + tile_types_needed);
			bw.write(printer1);
			bw.write(printer.toString());
			// closing the BufferedWriter
			bw.close();
			// Write successful
			System.out.println("Done");

		} catch (IOException e) {
			// File not found or any other exception
			e.printStackTrace();
		}

	}

	private static void readimage() {
		BufferedImage img;
		try {
			img = ImageIO.read(new File(IMG));
			width = img.getWidth();
			height = img.getHeight();
			pixelData = new int[img.getHeight()][img.getWidth()];

			for (int i = 0; i < img.getHeight(); i++) {
				for (int j = 0; j < img.getWidth(); j++) {
					pixelData[i][j] = img.getRGB(j, i);

				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// this method will append the given string with new line character to the
	// printer.
	public static void add_string(String s) {
		printer.append(s + "\n");
	}

	// this method is to take care of tiles_needed variable.because we can not
	// append it directly from start.
	public static void add_string2(String s) {
		printer1 += s + "\n";
	}

	// This method will take input parameter for a tile file. and append the
	// corresponding formated string to printer
	public static void add_tile(int north, int east, int south, int west,
			int color_index) {
		add_string("{" + north + " " + east + " " + south + " " + west
				+ " }[0.001](" + color_index + ")");

	}

}
